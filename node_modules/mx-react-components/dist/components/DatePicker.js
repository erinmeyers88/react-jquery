'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Radium = require('radium');
var moment = require('moment');

var Icon = require('./Icon');

var StyleConstants = require('../constants/Style');

var DatePicker = (function (_React$Component) {
  _inherits(DatePicker, _React$Component);

  function DatePicker(props) {
    _classCallCheck(this, DatePicker);

    _get(Object.getPrototypeOf(DatePicker.prototype), 'constructor', this).call(this, props);
    this.state = {
      currentDate: null,
      inputValue: this._getInputValueByDate(this.props.defaultDate),
      isValid: true,
      selectedDate: this.props.defaultDate,
      showCalendar: false
    };
  }

  _createClass(DatePicker, [{
    key: '_getInputValueByDate',
    value: function _getInputValueByDate(date) {
      var inputValue = null;

      if (date) {
        var newDate = moment.unix(date);

        if (newDate.isValid()) {
          inputValue = newDate.format(this.props.format);
        } else {
          inputValue = date;
        }
      }

      return inputValue;
    }
  }, {
    key: '_getSelectedDate',
    value: function _getSelectedDate() {
      var selectedDate = this.state.selectedDate;

      return selectedDate && moment.unix(selectedDate).isValid() ? this.state.selectedDate : moment().unix();
    }
  }, {
    key: '_handleDateSelect',
    value: function _handleDateSelect(date) {
      if (this.props.closeOnDateSelect) {
        this._handleScrimClick();
      }

      this.setState({
        inputValue: moment.unix(date).format(this.props.format),
        isValid: true,
        selectedDate: date
      });

      this.props.onDateSelect(date);
    }
  }, {
    key: '_handleInputBlur',
    value: function _handleInputBlur(evt) {
      if (evt.target.value.length === 0) {
        this.props.onDateSelect(null);

        this.setState({
          inputValue: null,
          selectedDate: null
        });
      } else {
        this.setState({
          inputValue: moment.unix(this.state.selectedDate).format(this.props.format)
        });
      }
    }
  }, {
    key: '_handleInputChange',
    value: function _handleInputChange(evt) {
      this.setState({
        inputValue: evt.target.value
      });
    }
  }, {
    key: '_handlePreviousClick',
    value: function _handlePreviousClick() {
      var selectedDate = moment.unix(this._getSelectedDate()).locale(this.props.locale);
      var currentDate = this.state.currentDate ? this.state.currentDate.locale(this.props.locale) : selectedDate;

      currentDate = moment(currentDate.startOf('month').subtract(1, 'm'), this.props.format);

      this.setState({
        currentDate: currentDate
      });
    }
  }, {
    key: '_handleNextClick',
    value: function _handleNextClick() {
      var selectedDate = moment.unix(this._getSelectedDate()).locale(this.props.locale);
      var currentDate = this.state.currentDate ? this.state.currentDate.locale(this.props.locale) : selectedDate;

      currentDate = moment(currentDate.endOf('month').add(1, 'd'), this.props.format);

      this.setState({
        currentDate: currentDate
      });
    }
  }, {
    key: '_handleScrimClick',
    value: function _handleScrimClick() {
      this.setState({
        showCalendar: false
      });
    }
  }, {
    key: '_toggleCalendar',
    value: function _toggleCalendar() {
      this.setState({
        showCalendar: !this.state.showCalendar
      });
    }
  }, {
    key: '_renderMonthTable',
    value: function _renderMonthTable(currentDate, selectedDate) {
      var days = [];
      var startDate = moment(currentDate, this.props.format).startOf('month').startOf('week');
      var endDate = moment(currentDate, this.props.format).endOf('month').endOf('week');
      var minimumDate = this.props.minimumDate ? moment.unix(this.props.minimumDate) : null;
      var dayHoverStyle = {
        ':hover': {
          backgroundColor: this.props.selectedDateColor,
          color: StyleConstants.Colors.INVERSE_PRIMARY,
          cursor: 'pointer'
        }
      };
      var selectedDayStyle = {
        backgroundColor: this.props.selectedDateColor,
        color: StyleConstants.Colors.INVERSE_PRIMARY
      };

      while (startDate.isBefore(endDate)) {
        var isCurrentMonth = startDate.month() === currentDate.month();
        var isCurrentDay = startDate.format(this.props.format) === selectedDate.format(this.props.format);
        var day = undefined;
        var noSelectDay = startDate.isBefore(minimumDate);

        day = React.createElement(
          'div',
          {
            key: startDate.month() + '-' + startDate.date(),
            onClick: !noSelectDay ? this._handleDateSelect.bind(this, startDate.unix()) : null,
            style: [styles.calendarDay, !noSelectDay && isCurrentMonth && styles.currentMonth]
          },
          React.createElement(
            'div',
            {
              key: startDate.format('DDDD'),
              style: [styles.calendarDayContent, noSelectDay ? styles.calendarDayDisabled : isCurrentDay && selectedDayStyle, dayHoverStyle]
            },
            React.createElement(
              'div',
              { style: styles.calendarDayText },
              startDate.date()
            )
          )
        );

        if (this.props.showDayBorders) {
          day.props.style.push([styles.borderRight, styles.borderBottom]);
        }

        days.push(day);
        startDate.add(1, 'd');
      }

      return days;
    }
  }, {
    key: '_renderScrim',
    value: function _renderScrim(styles) {
      if (this.state.showCalendar) {
        return React.createElement('div', { onClick: this._handleScrimClick.bind(this), style: [styles.scrim, this.props.scrimStyle] });
      }
    }
  }, {
    key: '_renderSelectedDate',
    value: function _renderSelectedDate() {
      if (this.props.useInputForSelectedDate) {
        var hidePlaceholder = this.state.inputValue && this.state.inputValue.length;

        return React.createElement(
          'div',
          null,
          React.createElement('input', {
            key: 'input',
            onBlur: this._handleInputBlur.bind(this),
            onChange: this._handleInputChange.bind(this),
            onClick: this._toggleCalendar.bind(this),
            style: [styles.input, this.props.inputStyle, hidePlaceholder && { backgroundColor: '#FFFFFF' }],
            type: 'text',
            value: this.state.inputValue
          }),
          React.createElement(
            'div',
            { style: [styles.placeholderText, this.props.placeholderTextStyle] },
            this.props.placeholderText || 'Select A Date'
          ),
          this._renderCaret()
        );
      } else {
        return React.createElement(
          'div',
          {
            key: 'selectedDate',
            onClick: this._toggleCalendar.bind(this),
            style: styles.selectedDate
          },
          this.state.inputValue,
          this._renderCaret()
        );
      }
    }
  }, {
    key: '_renderTitle',
    value: function _renderTitle(styles) {
      if (this.props.title) {
        return React.createElement(
          'div',
          { key: 'title', style: styles.title },
          this.props.title
        );
      }
    }
  }, {
    key: '_renderCaret',
    value: function _renderCaret() {
      if (this.props.showCaret) {
        return React.createElement(
          'div',
          { style: [styles.caretWrapper, this.props.caretWrapperStyle] },
          React.createElement(Icon, {
            onClick: this._toggleCalendar.bind(this),
            size: '20',
            style: styles.caret,
            type: this.state.showCalendar ? 'caret-up' : 'caret-down'
          })
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var selectedDate = moment.unix(this._getSelectedDate()).locale(this.props.locale);
      var currentDate = this.state.currentDate ? this.state.currentDate.locale(this.props.locale) : selectedDate;

      return React.createElement(
        'div',
        {
          style: [styles.component, styles.clearFix, this.props.style],
          tabIndex: '0'
        },
        React.createElement(
          'div',
          { key: 'selectedDateWrapper', style: [styles.selectedDateWrapper, this.props.selectedDateWrapperStyle] },
          this._renderSelectedDate()
        ),
        React.createElement(
          'div',
          { key: 'calendarWrapper', style: [styles.calendarWrapper, this.props.calendarWrapperStyle, this.state.showCalendar && styles.calendarShow] },
          this._renderTitle(styles),
          React.createElement(
            'div',
            { key: 'calendarHeader', style: [styles.calendarHeader, { borderBottomStyle: this.props.showDayBorders ? 'solid' : 'none' }, styles.clearFix] },
            React.createElement(Icon, {
              onClick: this._handlePreviousClick.bind(this),
              size: '32px',
              style: [styles.navIcon, styles.navLeft, this.props.showDayBorders && styles.borderRight],
              type: 'caret-left'
            }),
            currentDate.format('MMMM YYYY'),
            React.createElement(Icon, {
              onClick: this._handleNextClick.bind(this),
              size: '32px',
              style: [styles.navIcon, styles.navRight, this.props.showDayBorders && styles.borderLeft],
              type: 'caret-right'
            })
          ),
          React.createElement(
            'div',
            { style: styles.calendarContainer },
            this._renderMonthTable(currentDate, selectedDate)
          ),
          React.createElement('div', { style: styles.clearFix })
        ),
        this._renderScrim(styles)
      );
    }
  }]);

  return DatePicker;
})(React.Component);

DatePicker.propTypes = {
  calendarWrapperStyle: React.PropTypes.object,
  caretWrapperStyle: React.PropTypes.object,
  closeOnDateSelect: React.PropTypes.bool,
  defaultDate: React.PropTypes.number,
  format: React.PropTypes.string,
  inputStyle: React.PropTypes.object,
  locale: React.PropTypes.string,
  minimumDate: React.PropTypes.number,
  onDateSelect: React.PropTypes.func,
  placeholderText: React.PropTypes.string,
  placeholderTextStyle: React.PropTypes.object,
  scrimStyle: React.PropTypes.object,
  selectedDateColor: React.PropTypes.string,
  selectedDateWrapperStyle: React.PropTypes.object,
  showCaret: React.PropTypes.bool,
  showDayBorders: React.PropTypes.bool,
  style: React.PropTypes.object,
  title: React.PropTypes.string,
  useInputForSelectedDate: React.PropTypes.bool
};

DatePicker.defaultProps = {
  closeOnDateSelect: false,
  format: 'MMM D, YYYY',
  locale: 'en',
  onDateSelect: function onDateSelect() {},
  selectedDateColor: StyleConstants.Colors.BLUE,
  scrimStyle: {},
  showCaret: true,
  showDayBorders: false,
  title: null,
  useInputForSelectedDate: true
};

var styles = {
  caret: {
    color: StyleConstants.Colors.ASH,
    cursor: 'pointer',
    position: 'absolute',
    right: 5,
    top: '50%',
    transform: 'translateY(-50%)'
  },
  caretWrapper: {
    position: 'absolute',
    top: '50%',
    right: 5
  },
  calendarDay: {
    color: StyleConstants.Colors.ASH,
    float: 'left',
    paddingBottom: '11%',
    position: 'relative',
    width: '13.5%'
  },
  borderBottom: {
    borderBottom: StyleConstants.Colors.FOG,
    borderBottomStyle: 'solid',
    borderBottomWidth: 1
  },
  borderRight: {
    borderRight: StyleConstants.Colors.FOG,
    borderRightStyle: 'solid',
    borderRightWidth: 1
  },
  borderLeft: {
    borderLeft: StyleConstants.Colors.FOG,
    borderLeftStyle: 'solid',
    borderLeftWidth: 1
  },
  calendarContainer: {
    width: '100%',
    padding: '0px 2px 10px 6px'
  },
  calendarDayContent: {
    borderRadius: '50%',
    height: 32,
    left: '50%',
    position: 'absolute',
    top: '50%',
    transform: 'translateY(-50%) translateX(-50%)',
    width: 32
  },
  calendarDayText: {
    borderRadius: '100%',
    fontSize: StyleConstants.FontSizes.MEDIUM,
    fontWeight: 'normal',
    left: '50%',
    position: 'absolute',
    top: '50%',
    transform: 'translateY(-50%) translateX(-50%)'
  },
  calendarDayDisabled: {
    ':hover': {
      background: 'none',
      color: StyleConstants.Colors.PORCELAIN
    }
  },
  calendarHeader: {
    color: StyleConstants.Colors.CHARCOAL,
    borderBottom: StyleConstants.Colors.FOG,
    borderBottomWidth: 1,
    fontSize: StyleConstants.FontSizes.XLARGE,
    fontWeight: 'normal',
    padding: '5px 0px 7px 0px',
    position: 'relative',
    textAlign: 'center',
    textTransform: 'none'
  },
  calendarIcon: {
    color: StyleConstants.Colors.PORCELAIN,
    position: 'absolute',
    right: 12.8,
    top: '50%',
    transform: 'translateY(-50%)'
  },
  calendarShow: {
    display: 'block'
  },
  clearFix: {
    clear: 'both',
    marginBottom: 15
  },
  component: {
    backgroundColor: StyleConstants.Colors.INVERSE_PRIMARY,
    color: '#000000',
    fontFamily: StyleConstants.FontFamily,
    fontSize: StyleConstants.FontSizes.MEDIUM,
    WebkitAppearance: 'none',
    width: '100%',

    '@media (max-width: 768px)': {
      fontSize: 8
    },

    ':focus': {
      boxShadow: 'none',
      outline: 'none'
    }
  },
  calendarWrapper: {
    backgroundColor: StyleConstants.Colors.INVERSE_PRIMARY,
    borderBottomLeftRadius: 3,
    borderBottomRightRadius: 3,
    borderColor: StyleConstants.Colors.FOG,
    borderStyle: 'solid',
    borderWidth: 1,
    boxShadow: StyleConstants.BoxShadow,
    boxSizing: 'border-box',
    display: 'none',
    maxWidth: 270,
    padding: '0px 0px 0px 0px',
    margin: '0 0 40px 0',
    position: 'absolute',
    width: '100%',
    zIndex: 10
  },
  selectedDateWrapper: {
    borderColor: StyleConstants.Colors.FOG,
    borderRadius: '3px 3px 3px 3px',
    borderStyle: 'solid',
    borderWidth: '1px 1px 1px 1px',
    position: 'relative',
    padding: '5px 5px 5px 5px'
  },
  currentMonth: {
    color: StyleConstants.Colors.CHARCOAL
  },
  input: {
    backgroundColor: 'transparent',
    border: 'none',
    fontSize: StyleConstants.FontSizes.MEDIUM,
    outline: 'none',
    paddingBottom: 10,
    paddingLeft: 5,
    position: 'relative',
    top: 5,
    WebkitAppearance: 'none',
    width: '80%',
    zIndex: 2,

    ':focus': {
      border: 'none',
      boxShadow: 'none',
      outline: 'none'
    }
  },
  navIcon: {
    cursor: 'pointer'
  },
  navLeft: {
    position: 'absolute',
    left: '0',
    top: '50%',
    transform: 'translateY(-50%)'
  },
  navRight: {
    position: 'absolute',
    right: '0',
    top: '50%',
    transform: 'translateY(-50%)'
  },
  placeholderText: {
    color: StyleConstants.Colors.CHARCOAL,
    fontSize: StyleConstants.FontSizes.MEDIUM,
    paddingLeft: 5,
    position: 'absolute',
    top: 10
  },
  scrim: {
    position: 'fixed',
    zIndex: 9,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  },
  selectedDate: {
    color: StyleConstants.Colors.CHARCOAL,
    cursor: 'pointer',
    fontSize: StyleConstants.FontSizes.MEDIUM,
    padding: '5px 0 5px 5px',
    verticalAlign: 'middle',
    width: '100%',

    ':hover': {
      color: StyleConstants.Colors.BLUE
    }
  },
  title: {
    backgroundColor: StyleConstants.Colors.CHARCOAL,
    color: StyleConstants.Colors.PORCELAIN,
    textAlign: 'center',
    padding: '7px 0px 7px 0px',
    fontSize: StyleConstants.FontSizes.MEDIUM,
    margin: 1
  }
};

module.exports = Radium(DatePicker);