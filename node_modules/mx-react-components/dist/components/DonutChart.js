'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Radium = require('radium');
var d3 = require('d3');

var StyleConstants = require('../constants/Style');

var DonutChart = (function (_React$Component) {
  _inherits(DonutChart, _React$Component);

  function DonutChart(props) {
    _classCallCheck(this, DonutChart);

    _get(Object.getPrototypeOf(DonutChart.prototype), 'constructor', this).call(this, props);
    this.state = {
      activeIndex: -1
    };
  }

  _createClass(DonutChart, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({
        activeIndex: this.props.activeIndex
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      if (newProps.activeIndex !== this.props.activeIndex) {
        this.setState({
          activeIndex: newProps.activeIndex
        });
      }
    }
  }, {
    key: '_handleClick',
    value: function _handleClick(index) {
      this.props.onClick(index);
    }
  }, {
    key: '_handleMouseEnter',
    value: function _handleMouseEnter(index) {
      if (this.props.animateOnHover) {
        this.setState({
          activeIndex: index
        });
      }

      this.props.onMouseEnter(index);
    }
  }, {
    key: '_handleMouseLeave',
    value: function _handleMouseLeave() {
      if (this.props.animateOnHover) {
        this.setState({
          activeIndex: -1
        });
      }

      this.props.onMouseLeave();
    }
  }, {
    key: '_renderArcs',
    value: function _renderArcs() {
      var _this = this;

      if (this.props.data.length > 0) {
        var dataSets = this.props.data.map(function (item) {
          return item.value;
        });

        var valueTotal = dataSets.reduce(function (a, b) {
          return a + b;
        });

        if (valueTotal) {
          var _ret = (function () {
            var endAngle = _this.props.chartTotal ? valueTotal / _this.props.chartTotal : 1;
            var pie = d3.layout.pie().sort(null).padAngle(_this.props.padAngle).endAngle(endAngle * 2 * Math.PI);
            var values = pie(dataSets);
            var radius = Math.min(_this.props.width, _this.props.height) / 2;
            var standardArc = d3.svg.arc().outerRadius(radius - _this.props.activeOffset).innerRadius(radius - _this.props.arcWidth);
            var hoverArc = d3.svg.arc().outerRadius(radius).innerRadius(radius - _this.props.arcWidth);

            return {
              v: values.map(function (point, i) {
                var arc = _this.state.activeIndex === i && _this.props.animateOnHover ? hoverArc : standardArc;

                return React.createElement(
                  'g',
                  {
                    key: i,
                    onClick: _this._handleClick.bind(_this, i),
                    onMouseEnter: _this._handleMouseEnter.bind(_this, i),
                    onMouseLeave: _this._handleMouseLeave.bind(_this)
                  },
                  React.createElement('path', { d: arc(point), fill: _this.props.colors[i], opacity: _this.props.opacity })
                );
              })
            };
          })();

          if (typeof _ret === 'object') return _ret.v;
        }
      }
    }
  }, {
    key: '_renderBaseArc',
    value: function _renderBaseArc() {
      if (this.props.showBaseArc) {
        var radius = Math.min(this.props.width, this.props.height) / 2;

        var baseArc = d3.svg.arc().outerRadius(radius - this.props.activeOffset).innerRadius(radius - this.props.arcWidth).startAngle(0).endAngle(2 * Math.PI);

        return React.createElement(
          'g',
          { key: baseArc },
          React.createElement('path', { d: baseArc(), fill: this.props.baseArcColor })
        );
      }
    }
  }, {
    key: '_renderDataPoints',
    value: function _renderDataPoints() {
      var _this2 = this;

      var dataPoints = this.props.dataPoints.map(function (dataPoint) {
        return dataPoint.value;
      });

      var radius = Math.min(this.props.width, this.props.height) / 2;

      return dataPoints.map(function (dataPoint, index) {
        var endAngle = dataPoint / _this2.props.chartTotal;

        var dataPointArc = d3.svg.arc().outerRadius(radius - _this2.props.activeOffset).innerRadius(radius - _this2.props.arcWidth).startAngle(0).endAngle(endAngle * 2 * 2 * Math.PI);

        return React.createElement('circle', {
          cx: '0',
          cy: '0',
          fill: _this2.props.dataPointColors[index],
          key: index,
          r: _this2.props.dataPointRadius,
          transform: 'translate(' + dataPointArc.centroid() + ')'
        });
      });
    }
  }, {
    key: '_renderDataLabel',
    value: function _renderDataLabel() {
      if (this.props.showDataLabel) {
        if (this.props.children) {
          return React.createElement(
            'div',
            {
              className: 'mx-donutchart-data',
              onClick: this._handleClick.bind(this),
              style: styles.center
            },
            this.props.children
          );
        } else {
          var activeDataSet = this.props.data[this.state.activeIndex] || {};
          var color = this.state.activeIndex === -1 ? this.props.colors[0] : this.props.colors[this.state.activeIndex];
          var text = this.state.activeIndex === -1 ? this.props.defaultLabelText : activeDataSet.name;
          var value = this.state.activeIndex === -1 ? this.props.formatter(this.props.defaultLabelValue) : this.props.formatter(activeDataSet.value);

          return React.createElement(
            'div',
            {
              className: 'mx-donutchart-data',
              onClick: this._handleClick.bind(this),
              style: styles.center
            },
            React.createElement(
              'div',
              { className: 'mx-donutchart-data-value', style: [styles.value, { color: color }] },
              value
            ),
            React.createElement(
              'div',
              { className: 'mx-donutchart-data-label', style: styles.label },
              text
            )
          );
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var position = 'translate(' + this.props.width / 2 + ',' + this.props.height / 2 + ')';
      var fontSize = Math.min(this.props.width, this.props.height) * 0.2 + 'px';

      return React.createElement(
        'div',
        {
          className: 'mx-donutchart',
          style: [styles.component, this.props.style, { fontSize: fontSize, height: this.props.height, width: this.props.width }]
        },
        this._renderDataLabel(),
        React.createElement(
          'svg',
          {
            className: 'mx-donutchart-svg',
            height: this.props.height,
            width: this.props.width
          },
          React.createElement(
            'g',
            { className: 'mx-donutchart-g', transform: position },
            this._renderBaseArc(),
            this._renderArcs(),
            this._renderDataPoints()
          )
        )
      );
    }
  }]);

  return DonutChart;
})(React.Component);

var styles = {
  component: {
    position: 'relative',
    fontFamily: StyleConstants.FontFamily
  },
  center: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    textAlign: 'center',
    transform: 'translate(-50%, -50%)'
  },
  label: {
    color: StyleConstants.Colors.LIGHT_FONT,
    fontSize: '0.4em',
    marginTop: '5px'
  },
  value: {
    fontWeight: 300
  }
};

DonutChart.propTypes = {
  activeIndex: React.PropTypes.number,
  activeOffset: React.PropTypes.number,
  animateOnHover: React.PropTypes.bool,
  arcWidth: React.PropTypes.number,
  baseArcColor: React.PropTypes.string,
  chartTotal: React.PropTypes.number,
  children: React.PropTypes.node,
  colors: React.PropTypes.array,
  data: React.PropTypes.array.isRequired,
  dataPointColors: React.PropTypes.array,
  dataPointRadius: React.PropTypes.number,
  dataPoints: React.PropTypes.array,
  defaultLabelText: React.PropTypes.string,
  defaultLabelValue: React.PropTypes.string,
  formatter: React.PropTypes.func,
  height: React.PropTypes.number,
  onClick: React.PropTypes.func,
  onMouseEnter: React.PropTypes.func,
  onMouseLeave: React.PropTypes.func,
  opacity: React.PropTypes.number,
  padAngle: React.PropTypes.number,
  showBaseArc: React.PropTypes.bool,
  showDataLabel: React.PropTypes.bool,
  width: React.PropTypes.number
};

DonutChart.defaultProps = {
  activeIndex: -1,
  activeOffset: 0,
  animateOnHover: false,
  arcWidth: 10,
  baseArcColor: StyleConstants.Colors.BASE_ARC,
  colors: [StyleConstants.Colors.PRIMARY].concat(d3.scale.category20().range()),
  data: [],
  dataPointColors: [StyleConstants.Colors.SECONDARY].concat(d3.scale.category20b().range()),
  dataPointRadius: 5,
  dataPoints: [],
  formatter: function formatter(value) {
    return value;
  },
  height: 150,
  onClick: function onClick() {},
  onMouseEnter: function onMouseEnter() {},
  onMouseLeave: function onMouseLeave() {},
  opacity: 1,
  padAngle: 0.01,
  showBaseArc: true,
  showDataLabel: true,
  width: 150
};

module.exports = Radium(DonutChart);