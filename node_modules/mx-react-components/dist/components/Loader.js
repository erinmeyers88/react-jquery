'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var Spin = require('./Spin');

var StyleConstants = require('../constants/Style');

var Loader = (function (_React$Component) {
  _inherits(Loader, _React$Component);

  function Loader() {
    _classCallCheck(this, Loader);

    _get(Object.getPrototypeOf(Loader.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Loader, [{
    key: 'render',
    value: function render() {
      if (this.props.isLoading) {
        var styles = {
          component: {
            backgroundColor: 'rgba(255,255,255,0.9)',
            bottom: 0,
            color: '#999',
            fontFamily: StyleConstants.FontFamily,
            fontSize: '10px',
            fontWeight: 600,
            left: 0,
            letterSpacing: '1px',
            position: this.props.isRelative ? 'absolute' : 'fixed',
            right: 0,
            textAlign: 'center',
            top: 0,
            zIndex: 100
          },
          content: {
            textAlign: 'center',
            position: 'absolute',
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            margin: 'auto',
            width: this.props.isSmall ? '30px' : '50px',
            height: this.props.isSmall ? '30px' : '50px'
          },
          circle: {
            borderRadius: '100%',
            width: this.props.isSmall ? '30px' : '50px',
            height: this.props.isSmall ? '30px' : '50px',
            borderTop: '3px solid ' + this.props.color,
            borderRight: '3px solid transparent',
            borderBottom: '3px solid transparent',
            borderLeft: '3px solid transparent'
          },
          text: {
            marginTop: '10px',
            fontSize: '10px'
          }
        };

        return React.createElement(
          'div',
          { className: 'mx-loader', style: styles.component },
          React.createElement(
            'div',
            { className: 'mx-loader-content', style: styles.content },
            React.createElement(
              Spin,
              null,
              React.createElement('div', { style: styles.circle })
            ),
            this.props.isSmall ? null : React.createElement(
              'div',
              { className: 'mx-loader-text', style: styles.text },
              'LOADING...'
            )
          )
        );
      } else {
        return React.createElement('div', null);
      }
    }
  }]);

  return Loader;
})(React.Component);

Loader.propTypes = {
  color: React.PropTypes.string,
  isLoading: React.PropTypes.bool,
  isRelative: React.PropTypes.bool,
  isSmall: React.PropTypes.bool
};

Loader.defaultProps = {
  color: StyleConstants.Colors.PRIMARY,
  isLoading: false,
  isRelative: false,
  isSmall: false
};

module.exports = Loader;