'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Radium = require('radium');

var Icon = require('./Icon');

var StyleConstants = require('../constants/Style');

var Modal = (function (_React$Component) {
  _inherits(Modal, _React$Component);

  function Modal(props) {
    _classCallCheck(this, Modal);

    _get(Object.getPrototypeOf(Modal.prototype), 'constructor', this).call(this, props);
    this.state = {
      showTooltip: false
    };
  }

  _createClass(Modal, [{
    key: '_handleTooltipToggle',
    value: function _handleTooltipToggle(show) {
      this.setState({
        showTooltip: show
      });
    }
  }, {
    key: '_renderTitleBar',
    value: function _renderTitleBar() {
      if (this.props.showTitleBar) {
        return React.createElement(
          'div',
          { className: 'mx-modal-title-bar', style: styles.titleBar },
          this.props.title
        );
      }
    }
  }, {
    key: '_renderFooter',
    value: function _renderFooter() {
      if (this.props.showFooter) {
        return React.createElement(
          'div',
          { className: 'mx-modal-footer', style: styles.footer },
          React.createElement(
            'div',
            { className: 'mx-modal-tooltip-label', style: styles.tooltipLabel },
            React.createElement(Icon, {
              className: 'mx-modal-tooltip-label-icon',
              onMouseOut: this._handleTooltipToggle.bind(this, false),
              onMouseOver: this._handleTooltipToggle.bind(this, true),
              size: 18,
              style: { color: this.props.color },
              type: 'info'
            }),
            React.createElement(
              'span',
              {
                className: 'mx-modal-tooltip-label-text',
                onMouseOut: this._handleTooltipToggle.bind(this, false),
                onMouseOver: this._handleTooltipToggle.bind(this, true),
                style: [styles.tooltipLabelText, { color: this.props.color }]
              },
              this.props.tooltipLabel
            )
          ),
          React.createElement(
            'div',
            { className: 'mx-modal-buttons' },
            this.props.buttons.map(function (button, i) {
              return React.createElement(
                'div',
                {
                  className: 'mx-modal-button ' + button.className,
                  key: button.type + i,
                  onClick: button.onClick,
                  style: [styles.button, styles[button.type + 'Button'], button.style]
                },
                button.label
              );
            })
          )
        );
      }
    }
  }, {
    key: '_renderTooltip',
    value: function _renderTooltip() {
      if (this.state.showTooltip) {
        return React.createElement(
          'div',
          { style: styles.tooltip },
          React.createElement(
            'div',
            { className: 'mx-modal-tooltip-title', style: [styles.tooltipTitle, { color: this.props.color }] },
            this.props.tooltipTitle
          ),
          React.createElement(
            'div',
            { className: 'mx-modal-tooltip-content', style: styles.tooltipContent },
            this.props.tooltip
          )
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.isOpen) return React.createElement(
        'div',
        { className: 'mx-modal', style: [styles.scrim, this.props.isRelative && styles.relative] },
        React.createElement('div', { className: 'mx-modal-scrim', onClick: this.props.onRequestClose, style: [styles.scrim, styles.overlay, this.props.isRelative && styles.relative] }),
        React.createElement(
          'div',
          {
            className: 'mx-modal-container',
            style: [styles.container, this.props.style]
          },
          React.createElement(Icon, {
            className: 'mx-modal-close',
            onClick: this.props.onRequestClose,
            size: 24,
            style: styles.close,
            type: 'close-solid'
          }),
          this._renderTitleBar(),
          React.createElement(
            'div',
            { className: 'mx-modal-content', style: [styles.content, this.props.contentStyle] },
            this.props.children,
            this._renderTooltip()
          ),
          this._renderFooter()
        )
      );else return null;
    }
  }]);

  return Modal;
})(React.Component);

var styles = {
  scrim: {
    zIndex: 1000,
    position: 'fixed',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    textAlign: 'center'
  },
  relative: {
    position: 'absolute'
  },
  overlay: {
    background: 'rgba(255,255,255,0.9)'
  },
  close: {
    position: 'absolute',
    top: 0,
    right: 0,
    margin: '-12px -12px 0 0',
    cursor: 'pointer',
    color: StyleConstants.Colors.CHARCOAL
  },
  container: {
    fontFamily: StyleConstants.FontFamily,
    boxSizing: 'border-box',
    position: 'relative',
    zIndex: 1001,
    backgroundColor: '#FFFFFF',
    boxShadow: '0 0 30px 5px rgba(0,0,0,0.1)',
    borderRadius: '2px',
    top: 20,
    maxWidth: 'calc(100% - 40px)',
    display: 'inline-block',
    textAlign: 'left'
  },
  titleBar: {
    backgroundColor: StyleConstants.Colors.PORCELAIN,
    padding: '15px 20px',
    color: StyleConstants.Colors.ASH,
    fontSize: StyleConstants.FontSizes.SMALL,
    textTransform: 'uppercase'
  },
  content: {
    position: 'relative',
    maxHeight: 'calc(100% - 140px)',
    overflow: 'auto'
  },
  footer: {
    backgroundColor: StyleConstants.Colors.PORCELAIN,
    padding: '15px 20px',
    display: 'flex',
    justifyContent: 'space-between'
  },
  tooltipLabel: {
    padding: '5px 0'
  },
  tooltipLabelText: {
    fontSize: StyleConstants.FontSizes.SMALL
  },
  tooltip: {
    backgroundColor: StyleConstants.Colors.PORCELAIN,
    borderColor: StyleConstants.Colors.FOG,
    borderStyle: 'solid',
    borderWidth: '1px',
    boxSizing: 'border-box',
    bottom: 10,
    left: 10,
    position: 'absolute',
    width: 250,
    maxWidth: '100%',
    padding: 10
  },
  tooltipTitle: {
    fontSize: StyleConstants.FontSizes.SMALL,
    marginBottom: 5
  },
  tooltipContent: {
    color: StyleConstants.Colors.ASH,
    fontSize: StyleConstants.FontSizes.TINY,
    lineHeight: '1.5em',
    textAlign: 'left'
  },
  buttons: {
    textAlign: 'right'
  },
  button: {
    display: 'inline-block',
    borderRadius: '2px',
    cursor: 'pointer',
    fontSize: StyleConstants.FontSizes.MEDIUM,
    fontWeight: 600,
    padding: '7px 14px',
    marginLeft: 5
  },
  primaryButton: {
    backgroundColor: StyleConstants.Colors.PRIMARY,
    color: StyleConstants.Colors.INVERSE_SECONDARY
  },
  secondaryButton: {
    backgroundColor: StyleConstants.Colors.FOG,
    color: StyleConstants.Colors.CHARCOAL
  },
  small: {
    width: 400,
    textAlign: 'center'
  }
};

Modal.propTypes = {
  buttons: React.PropTypes.arrayOf(React.PropTypes.shape({
    className: React.PropTypes.string,
    label: React.PropTypes.string,
    onClick: React.PropTypes.func,
    style: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),
    type: React.PropTypes.oneOf(['primary', 'secondary'])
  })),
  color: React.PropTypes.string,
  contentStyle: React.PropTypes.object,
  isOpen: React.PropTypes.bool,
  isRelative: React.PropTypes.bool,
  onRequestClose: React.PropTypes.func,
  showFooter: React.PropTypes.bool,
  showTitleBar: React.PropTypes.bool,
  title: React.PropTypes.string,
  tooltip: React.PropTypes.string,
  tooltipLabel: React.PropTypes.string,
  tooltipTitle: React.PropTypes.string
};

Modal.defaultProps = {
  buttons: [],
  color: StyleConstants.Colors.PRIMARY,
  isOpen: false,
  isRelative: false,
  showFooter: false,
  showTitleBar: false,
  title: '',
  tooltip: null,
  tooltipLabel: '',
  tooltipTitle: null
};

module.exports = Radium(Modal);