'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Radium = require('radium');

var Icon = require('./Icon');

var StyleConstants = require('../constants/Style');

var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

var Select = (function (_React$Component) {
  _inherits(Select, _React$Component);

  function Select(props) {
    _classCallCheck(this, Select);

    _get(Object.getPrototypeOf(Select.prototype), 'constructor', this).call(this, props);
    this.state = {
      isOpen: false,
      selected: false
    };
  }

  _createClass(Select, [{
    key: '_handleScrimClick',
    value: function _handleScrimClick() {
      this.setState({
        isOpen: false
      });
    }
  }, {
    key: '_handleClick',
    value: function _handleClick() {
      if (!isMobile) {
        this.setState({
          isOpen: !this.state.isOpen
        });
      }
    }
  }, {
    key: '_handleOptionClick',
    value: function _handleOptionClick(option) {
      this.setState({
        selected: option,
        isOpen: false
      });

      this.props.onChange(option);
    }
  }, {
    key: '_handleSelectChange',
    value: function _handleSelectChange(e) {
      var selectedOption = this.props.options.filter(function (option) {
        return option.value + '' === e.target.value;
      })[0];

      this._handleOptionClick(selectedOption);
    }
  }, {
    key: '_renderScrim',
    value: function _renderScrim() {
      if (this.state.isOpen) {
        return React.createElement('div', { className: 'mx-select-scrim',
          onClick: this._handleScrimClick.bind(this), style: [styles.scrim, this.props.scrimStyle] });
      }
    }
  }, {
    key: '_renderOptions',
    value: function _renderOptions() {
      var _this = this;

      if (this.state.isOpen) {
        if (this.props.children) {
          return React.createElement(
            'div',
            { className: 'mx-select-options', style: [styles.options, this.props.optionsStyle] },
            this.props.children
          );
        } else {
          return React.createElement(
            'ul',
            { className: 'mx-select-options', style: [styles.options, this.props.optionsStyle] },
            this.props.options.map(function (option) {
              return React.createElement(
                'li',
                {
                  className: 'mx-select-option',
                  key: option.displayValue + option.value,
                  onClick: _this._handleOptionClick.bind(_this, option),
                  ref: option.displayValue + option.value,
                  style: [styles.option, _this.props.optionStyle]
                },
                option.displayValue
              );
            })
          );
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var selected = this.state.selected || this.props.selected || { displayValue: this.props.placeholderText, value: '' };

      return React.createElement(
        'div',
        { className: 'mx-select', style: [this.props.style, { position: 'relative' }] },
        React.createElement(
          'div',
          { className: 'mx-select-custom',
            onClick: this._handleClick.bind(this),
            style: [styles.component, this.props.dropdownStyle],
            tabIndex: '0'
          },
          this._renderScrim(),
          React.createElement(
            'div',
            { className: 'mx-select-selected', key: 'selected', style: [styles.selected, this.props.selectedStyle] },
            selected.displayValue,
            React.createElement(Icon, {
              size: '20',
              style: styles.caret,
              type: this.state.isOpen ? 'caret-up' : 'caret-down'
            })
          ),
          this._renderOptions()
        ),
        isMobile ? React.createElement(
          'select',
          { className: 'mx-select-default', onChange: this._handleSelectChange.bind(this), ref: 'defaultSelect', style: styles.select, value: selected.value },
          this.props.options.map(function (option) {
            return React.createElement(
              'option',
              { key: option.displayValue + option.value, value: option.value },
              option.displayValue
            );
          })
        ) : null
      );
    }
  }]);

  return Select;
})(React.Component);

var styles = {
  caret: {
    color: '#CCCCCC',
    cursor: 'pointer',
    position: 'absolute',
    right: '-5px',
    top: '50%',
    transform: 'translateY(-50%)'
  },
  component: {
    backgroundColor: '#FFFFFF',
    borderRadius: '3px',
    border: '1px solid #E5E5E5',
    cursor: 'pointer',
    fontFamily: StyleConstants.FontFamily,
    fontSize: StyleConstants.FontSizes.MEDIUM,
    padding: '11px 10px 12px',
    position: 'relative',
    appearance: 'none',
    WebkitAppearance: 'none',
    boxSizing: 'border-box',
    outline: 'none'
  },
  select: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    width: '100%',
    WebkitAppearance: 'none',
    opacity: 0
  },
  selected: {
    position: 'relative'
  },
  invalid: {
    borderColor: StyleConstants.Colors.RED
  },
  options: {
    backgroundColor: '#FFFFFF',
    border: '1px solid #E5E5E5',
    borderRadius: '0 0 3px 3px',
    left: '-1px',
    right: '-1px',
    margin: '10px 0 0 0',
    padding: '0',
    minWidth: '100%',
    position: 'absolute',
    zIndex: 10,
    fontSize: '12px',
    boxShadow: '0 30px 30px 10px rgba(0,0,0,0.1)',
    boxSizing: 'border-box',
    maxHeight: '260px',
    overflow: 'auto'
  },
  option: {
    cursor: 'pointer',
    backgroundColor: '#FFFFFF',
    padding: '10px',
    whiteSpace: 'nowrap',
    opacity: 0.4,

    ':hover': {
      backgroundColor: StyleConstants.Colors.PRIMARY,
      color: StyleConstants.Colors.INVERSE_PRIMARY,
      opacity: 1
    }
  },
  scrim: {
    position: 'fixed',
    zIndex: 9,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
};

Select.propTypes = {
  dropdownStyle: React.PropTypes.oneOfType([React.PropTypes.object, React.PropTypes.array]),
  onChange: React.PropTypes.func,
  options: React.PropTypes.array,
  optionsStyle: React.PropTypes.oneOfType([React.PropTypes.object, React.PropTypes.array]),
  optionStyle: React.PropTypes.oneOfType([React.PropTypes.object, React.PropTypes.array]),
  placeholderText: React.PropTypes.string,
  scrimStyle: React.PropTypes.oneOfType([React.PropTypes.object, React.PropTypes.array]),
  selected: React.PropTypes.object,
  selectedStyle: React.PropTypes.oneOfType([React.PropTypes.object, React.PropTypes.array]),
  valid: React.PropTypes.bool
};

Select.defaultProps = {
  onChange: function onChange() {},
  options: [],
  placeholderText: 'Select One',
  selected: false,
  valid: true
};

module.exports = Radium(Select);