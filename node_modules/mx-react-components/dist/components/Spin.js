'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var ReactDOM = require('react-dom');

var Spin = (function (_React$Component) {
  _inherits(Spin, _React$Component);

  function Spin(props) {
    _classCallCheck(this, Spin);

    _get(Object.getPrototypeOf(Spin.prototype), 'constructor', this).call(this, props);
  }

  _createClass(Spin, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var el = ReactDOM.findDOMNode(this);
      var speed = this.props.speed;
      var spinDirection = this.props.direction === 'clockwise' ? -1 : 1;
      var rotation = 0;

      setInterval(function () {
        el.style.transform = 'rotate(' + rotation * spinDirection + 'deg)';

        if (rotation < 360) {
          rotation += 1;
        } else {
          rotation = 0;
        }
      }, speed / 360);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        { className: 'mx-spin', style: { display: 'inline-block' } },
        this.props.children
      );
    }
  }]);

  return Spin;
})(React.Component);

Spin.propTypes = {
  children: React.PropTypes.node,
  direction: React.PropTypes.oneOf(['counterclockwise', 'clockwise']),
  speed: React.PropTypes.number //milliseconds, time it takes to make 1 full rotation
};

Spin.defaultProps = {
  direction: 'clockwise',
  speed: 1000
};

module.exports = Spin;