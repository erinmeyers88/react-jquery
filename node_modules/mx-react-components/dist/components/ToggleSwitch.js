'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Radium = require('radium');
var StyleConstants = require('../constants/Style');

var ToggleSwitch = (function (_React$Component) {
  _inherits(ToggleSwitch, _React$Component);

  function ToggleSwitch(props) {
    _classCallCheck(this, ToggleSwitch);

    _get(Object.getPrototypeOf(ToggleSwitch.prototype), 'constructor', this).call(this, props);
    this.state = {
      activePosition: this.props.defaultPosition
    };
  }

  _createClass(ToggleSwitch, [{
    key: '_handleLeftLabelClick',
    value: function _handleLeftLabelClick() {
      var activePosition = 'left';

      this.setState({
        activePosition: activePosition
      });

      this.props.onToggle(activePosition);
    }
  }, {
    key: '_handleRightLabelClick',
    value: function _handleRightLabelClick() {
      var activePosition = 'right';

      this.setState({
        activePosition: activePosition
      });

      this.props.onToggle(activePosition);
    }
  }, {
    key: '_handleToggle',
    value: function _handleToggle() {
      var activePosition = this.state.activePosition === 'left' ? 'right' : 'left';

      this.setState({
        activePosition: activePosition
      });

      this.props.onToggle(activePosition);
    }
  }, {
    key: '_renderLeftLabel',
    value: function _renderLeftLabel(styles) {
      if (this.props.showLabels) {
        return React.createElement(
          'span',
          { className: 'left-label', onClick: this._handleLeftLabelClick.bind(this), style: [styles.label, this.props.labelStyle, this.state.activePosition === 'left' && styles.activeLabel || styles.inactiveLabel] },
          this.props.leftLabel
        );
      }
    }
  }, {
    key: '_renderRightLabel',
    value: function _renderRightLabel(styles) {
      if (this.props.showLabels) {
        return React.createElement(
          'span',
          { className: 'right-label', onClick: this._handleRightLabelClick.bind(this), style: [styles.label, this.props.labelStyle, this.state.activePosition === 'right' && styles.activeLabel || styles.inactiveLabel] },
          this.props.rightLabel
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var styles = {
        activeLabel: {
          color: this.props.activeColor
        },
        component: {
          display: 'inline-block',
          fontFamily: StyleConstants.FontFamily,
          fontSize: '12px',
          position: 'relative'
        },
        inactiveLabel: {
          color: this.props.inactiveColor
        },
        label: {
          cursor: 'pointer',
          fontWeight: 'bold'
        },
        left: {
          left: this.props.trackStyle.padding || '2px',
          transition: 'all .1s'
        },
        right: {
          right: this.props.trackStyle.padding || '2px',
          transition: 'all .1s'
        },
        toggle: {
          backgroundColor: StyleConstants.Colors.INVERSE_PRIMARY,
          borderRadius: '100%',
          height: this.props.toggleStyle.height || '20px',
          position: 'absolute',
          width: this.props.toggleStyle.width || '20px'
        },
        track: {
          backgroundColor: StyleConstants.Colors.LIGHT_FONT,
          borderRadius: this.props.trackStyle.height || '20px',
          cursor: 'pointer',
          display: 'inline-block',
          height: this.props.trackStyle.height || '20px',
          margin: '0 10px',
          padding: this.props.trackStyle.padding || '2px',
          position: 'relative',
          verticalAlign: 'middle',
          width: this.props.trackStyle.width || '38px'
        }
      };

      return React.createElement(
        'div',
        { className: 'toggle-switch-component', style: [styles.component, this.props.componentStyle] },
        this._renderLeftLabel(styles),
        React.createElement(
          'div',
          { className: 'toggle-switch-track', onClick: this._handleToggle.bind(this), style: [styles.track, this.props.trackStyle] },
          React.createElement('div', { className: 'toggle-switch-toggle', style: [styles.toggle, styles[this.state.activePosition], this.props.toggleStyle] }),
          this.props.children
        ),
        this._renderRightLabel(styles)
      );
    }
  }]);

  return ToggleSwitch;
})(React.Component);

ToggleSwitch.propTypes = {
  activeColor: React.PropTypes.string,
  children: React.PropTypes.node,
  componentStyle: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),
  defaultPosition: React.PropTypes.oneOf(['left', 'right']),
  inactiveColor: React.PropTypes.string,
  labelStyle: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),
  leftLabel: React.PropTypes.string,
  onToggle: React.PropTypes.func,
  rightLabel: React.PropTypes.string,
  showLabels: React.PropTypes.bool,
  toggleStyle: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),
  trackStyle: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object])
};

ToggleSwitch.defaultProps = {
  activeColor: StyleConstants.Colors.PRIMARY,
  defaultPosition: 'left',
  inactiveColor: StyleConstants.Colors.LIGHT_FONT,
  leftLabel: 'On',
  onToggle: function onToggle() {},
  rightLabel: 'Off',
  showLabels: true,
  toggleStyle: {},
  trackStyle: {}
};

module.exports = Radium(ToggleSwitch);